
import React from "react";
//import 'server-only'

import { redirect } from 'next/navigation';

import BreadCrumbs from '@/components/properties/BreadCrumbs';
import FavoriteToggleButton from '@/components/card/FavoriteToggleButton';

import ShareButton from "@/components/properties/ShareButton";
import ImageContainer from "@/components/properties/ImageContainer";

import PropertyRating from '@/components/card/PropertyRating';

import PropertyDetails from '@/components/properties/PropertyDetails';
import UserInfo from '@/components/properties/UserInfo';

import { Separator } from '@/components/ui/separator';
import Description from '@/components/properties/Description';

import Amenities from '@/components/properties/Amenities';

import dynamic from 'next/dynamic';
import { Skeleton } from '@/components/ui/skeleton';

import SubmitReview from "@/components/reviews/SubmitReview";
import PropertyReviews from "@/components/reviews/PropertyReviews";

import { fetchPropertyDetails, findExistingReview } from '@/utils/actions';
import { auth } from '@clerk/nextjs/server';


// Workaround 
//import { DynamicMap } from '@/utils/code-fix';
//import { DynamicBookingWrapper } from '@/utils/code-fix';

const DynamicMap = dynamic(
  () => import('@/components/properties/PropertyMap'),
  {
    ssr: false,
    //ssr: true,
    loading: () => <Skeleton className='h-[400px] w-full' />,
  }
);


// Jan 1st - Adding Booking Construct 

const DynamicBookingWrapper = dynamic(
  () => import('@/components/booking/BookingWrapper'),
  {
    //ssr: true,
    ssr: false,
    loading: () => <Skeleton className='h-[200px] w-full' />,
    
  }
);

//
//
export default async function PropertyDetailsPage( 
  //{ params }: { params: { id: string } }
  // first change as follows...
  props: { params: Promise<{ id: string }> }
 ) 
  {   //const property = await fetchPropertyDetails(params.id);
      // Error: Route "/properties/[id]" used `params.id`. `params` should be awaited before using its properties.
      // Next access id as this
      const { id } = await props.params;
      const property = await fetchPropertyDetails(id);
      // this is solution 
    
    if (!property) redirect('/');
    const { baths, bedrooms, beds, guests } = property;
    const details = { baths, bedrooms, beds, guests };

    // Added on Dec. 30th 2024
    const firstName = property.profile.firstName;
    const profileImage = property.profile.profileImage;

  // Jan 1st 2025 updates
  // Construct added for validating user access who's not owner
    const { userId } = auth();
    const isNotOwner = property.profile.clerkId !== userId;
    const reviewDoesNotExist =
      userId && isNotOwner && !(await findExistingReview(userId, property.id));
  // console.log(property.bookings)  

    return (
      <section>
        <BreadCrumbs name={property.name} />
        <header className='flex justify-between items-center mt-4'>
          <h1 className='text-4xl font-bold '>{property.tagline}</h1>
          <div className='flex items-center gap-x-4'>
            <ShareButton name={property.name} propertyId={property.id} />
            <FavoriteToggleButton propertyId={property.id} />
          </div>
        </header>
        <ImageContainer mainImage={property.image} name={property.name} />
        

        <section className='lg:grid lg:grid-cols-12 gap-x-12 mt-12'>
        <div className='lg:col-span-8'>
          <div className='flex gap-x-4 items-center'>
            <h1 className='text-xl font-bold'>{property.name} </h1>
            <PropertyRating inPage propertyId={property.id} />
          </div>
          
          <PropertyDetails details={details} />
          <UserInfo profile={{ firstName, profileImage }} />

          <Separator className='mt-4' />
          <Description description={property.description} />

          <Amenities amenities={property.amenities} />
          <DynamicMap countryCode={property.country} />
        </div>

        <div className='lg:col-span-4 flex flex-col items-center'>
          {/* calendar */}
         
          <DynamicBookingWrapper
          
            propertyId={property.id}
            price={property.price}
            bookings={property.bookings} />
      
        </div>

      </section>

        {/* after two column section */}
        {reviewDoesNotExist && <SubmitReview propertyId={property.id} />}
        <PropertyReviews propertyId={property.id} />
 
      </section>
    );
  }  